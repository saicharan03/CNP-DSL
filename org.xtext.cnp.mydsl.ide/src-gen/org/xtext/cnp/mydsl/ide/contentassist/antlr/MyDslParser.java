/*
 * generated by Xtext 2.9.0.rc1
 */
package org.xtext.cnp.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.cnp.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.cnp.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getClassAccess().getAlternatives(), "rule__Class__Alternatives");
					put(grammarAccess.getAbstractTypeAccess().getAlternatives(), "rule__AbstractType__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
					put(grammarAccess.getActivityAccess().getAlternatives_8_1(), "rule__Activity__Alternatives_8_1");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives_1_0(), "rule__Condition__Alternatives_1_0");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives_1_0(), "rule__Expression__Alternatives_1_0");
					put(grammarAccess.getTermAccess().getAlternatives_1_0(), "rule__Term__Alternatives_1_0");
					put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getAbstractTypeAccess().getGroup_1(), "rule__AbstractType__Group_1__0");
					put(grammarAccess.getClassAttributesAccess().getGroup(), "rule__ClassAttributes__Group__0");
					put(grammarAccess.getOrganizationalModelAccess().getGroup(), "rule__OrganizationalModel__Group__0");
					put(grammarAccess.getAgentAccess().getGroup(), "rule__Agent__Group__0");
					put(grammarAccess.getTasksModelAccess().getGroup(), "rule__TasksModel__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getContractNetProtocolAccess().getGroup(), "rule__ContractNetProtocol__Group__0");
					put(grammarAccess.getRoleBehaviorAccess().getGroup(), "rule__RoleBehavior__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
					put(grammarAccess.getAttributeValueAccess().getGroup(), "rule__AttributeValue__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_4(), "rule__Action__Group_4__0");
					put(grammarAccess.getStateAccess().getGroup_0(), "rule__State__Group_0__0");
					put(grammarAccess.getStateAccess().getGroup_1(), "rule__State__Group_1__0");
					put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
					put(grammarAccess.getActivityAccess().getGroup_8(), "rule__Activity__Group_8__0");
					put(grammarAccess.getActivityAccess().getGroup_8_1_1(), "rule__Activity__Group_8_1_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
					put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getActionStatementAccess().getGroup(), "rule__ActionStatement__Group__0");
					put(grammarAccess.getAssertStatementAccess().getGroup(), "rule__AssertStatement__Group__0");
					put(grammarAccess.getChangeStateStatementAccess().getGroup(), "rule__ChangeStateStatement__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_0(), "rule__Expression__Group_1_0_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_1(), "rule__Expression__Group_1_0_1__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_1_0_0(), "rule__Term__Group_1_0_0__0");
					put(grammarAccess.getTermAccess().getGroup_1_0_1(), "rule__Term__Group_1_0_1__0");
					put(grammarAccess.getFactorAccess().getGroup_4(), "rule__Factor__Group_4__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_2(), "rule__QualifiedName__Group_2__0");
					put(grammarAccess.getModelAccess().getAgentAttributesAssignment_1(), "rule__Model__AgentAttributesAssignment_1");
					put(grammarAccess.getModelAccess().getTaskAttributesAssignment_3(), "rule__Model__TaskAttributesAssignment_3");
					put(grammarAccess.getModelAccess().getBidAttributesAssignment_5(), "rule__Model__BidAttributesAssignment_5");
					put(grammarAccess.getModelAccess().getContractAttributesAssignment_7(), "rule__Model__ContractAttributesAssignment_7");
					put(grammarAccess.getModelAccess().getOrganizationalModelAssignment_8(), "rule__Model__OrganizationalModelAssignment_8");
					put(grammarAccess.getModelAccess().getTasksModelAssignment_9(), "rule__Model__TasksModelAssignment_9");
					put(grammarAccess.getModelAccess().getContractNetProtocolsAssignment_10(), "rule__Model__ContractNetProtocolsAssignment_10");
					put(grammarAccess.getAbstractTypeAccess().getTypeAssignment_0(), "rule__AbstractType__TypeAssignment_0");
					put(grammarAccess.getAbstractTypeAccess().getListTypeAssignment_1_0(), "rule__AbstractType__ListTypeAssignment_1_0");
					put(grammarAccess.getAbstractTypeAccess().getTypeAssignment_1_2(), "rule__AbstractType__TypeAssignment_1_2");
					put(grammarAccess.getClassAttributesAccess().getAgentAttributesAssignment_1(), "rule__ClassAttributes__AgentAttributesAssignment_1");
					put(grammarAccess.getOrganizationalModelAccess().getAgentsAssignment_1(), "rule__OrganizationalModel__AgentsAssignment_1");
					put(grammarAccess.getAgentAccess().getNameAssignment_1(), "rule__Agent__NameAssignment_1");
					put(grammarAccess.getAgentAccess().getAttributeValuesAssignment_3(), "rule__Agent__AttributeValuesAssignment_3");
					put(grammarAccess.getTasksModelAccess().getTasksAssignment_1(), "rule__TasksModel__TasksAssignment_1");
					put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
					put(grammarAccess.getTaskAccess().getAttributeValuesAssignment_3(), "rule__Task__AttributeValuesAssignment_3");
					put(grammarAccess.getContractNetProtocolAccess().getNameAssignment_1(), "rule__ContractNetProtocol__NameAssignment_1");
					put(grammarAccess.getContractNetProtocolAccess().getVariablesAssignment_2(), "rule__ContractNetProtocol__VariablesAssignment_2");
					put(grammarAccess.getContractNetProtocolAccess().getRoleBehaviorAssignment_4(), "rule__ContractNetProtocol__RoleBehaviorAssignment_4");
					put(grammarAccess.getRoleBehaviorAccess().getNameAssignment_1(), "rule__RoleBehavior__NameAssignment_1");
					put(grammarAccess.getRoleBehaviorAccess().getActionsAssignment_5(), "rule__RoleBehavior__ActionsAssignment_5");
					put(grammarAccess.getRoleBehaviorAccess().getStatesAssignment_7(), "rule__RoleBehavior__StatesAssignment_7");
					put(grammarAccess.getRoleBehaviorAccess().getStartStateAssignment_9(), "rule__RoleBehavior__StartStateAssignment_9");
					put(grammarAccess.getRoleBehaviorAccess().getEndStateAssignment_11(), "rule__RoleBehavior__EndStateAssignment_11");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_0(), "rule__Attribute__TypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getDefaultAssignment_2_1(), "rule__Attribute__DefaultAssignment_2_1");
					put(grammarAccess.getAttributeValueAccess().getAttributeAssignment_0(), "rule__AttributeValue__AttributeAssignment_0");
					put(grammarAccess.getAttributeValueAccess().getValueAssignment_2(), "rule__AttributeValue__ValueAssignment_2");
					put(grammarAccess.getVariableAccess().getTypeAssignment_0(), "rule__Variable__TypeAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
					put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
					put(grammarAccess.getActionAccess().getInputsAssignment_3(), "rule__Action__InputsAssignment_3");
					put(grammarAccess.getActionAccess().getInputsAssignment_4_1(), "rule__Action__InputsAssignment_4_1");
					put(grammarAccess.getStateAccess().getBackgroundStateAssignment_0_0(), "rule__State__BackgroundStateAssignment_0_0");
					put(grammarAccess.getStateAccess().getNameAssignment_0_1(), "rule__State__NameAssignment_0_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1_1(), "rule__State__NameAssignment_1_1");
					put(grammarAccess.getStateAccess().getVariablesAssignment_1_3(), "rule__State__VariablesAssignment_1_3");
					put(grammarAccess.getStateAccess().getActivitiesAssignment_1_4(), "rule__State__ActivitiesAssignment_1_4");
					put(grammarAccess.getActivityAccess().getDeclarationsAssignment_0(), "rule__Activity__DeclarationsAssignment_0");
					put(grammarAccess.getActivityAccess().getIfAssignment_3(), "rule__Activity__IfAssignment_3");
					put(grammarAccess.getActivityAccess().getThenAssignment_6(), "rule__Activity__ThenAssignment_6");
					put(grammarAccess.getActivityAccess().getElseifAssignment_8_1_0(), "rule__Activity__ElseifAssignment_8_1_0");
					put(grammarAccess.getActivityAccess().getElseAssignment_8_1_1_1(), "rule__Activity__ElseAssignment_8_1_1_1");
					put(grammarAccess.getOperatorAccess().getEqualToAssignment_0(), "rule__Operator__EqualToAssignment_0");
					put(grammarAccess.getOperatorAccess().getLargerThanAssignment_1(), "rule__Operator__LargerThanAssignment_1");
					put(grammarAccess.getOperatorAccess().getSmallerThanAssignment_2(), "rule__Operator__SmallerThanAssignment_2");
					put(grammarAccess.getOperatorAccess().getLargerOrEqualToAssignment_3(), "rule__Operator__LargerOrEqualToAssignment_3");
					put(grammarAccess.getOperatorAccess().getSmallerOrEqualToAssignment_4(), "rule__Operator__SmallerOrEqualToAssignment_4");
					put(grammarAccess.getOperatorAccess().getNotEqualToAssignment_5(), "rule__Operator__NotEqualToAssignment_5");
					put(grammarAccess.getConditionAccess().getSubjectiveAssignment_0_0(), "rule__Condition__SubjectiveAssignment_0_0");
					put(grammarAccess.getConditionAccess().getOperatorAssignment_0_1(), "rule__Condition__OperatorAssignment_0_1");
					put(grammarAccess.getConditionAccess().getObjectiveAssignment_0_2(), "rule__Condition__ObjectiveAssignment_0_2");
					put(grammarAccess.getConditionAccess().getAndAssignment_1_0_0(), "rule__Condition__AndAssignment_1_0_0");
					put(grammarAccess.getConditionAccess().getOrAssignment_1_0_1(), "rule__Condition__OrAssignment_1_0_1");
					put(grammarAccess.getConditionAccess().getCompareConditionAssignment_1_1(), "rule__Condition__CompareConditionAssignment_1_1");
					put(grammarAccess.getStatementAccess().getIsActionAssignment_0_0(), "rule__Statement__IsActionAssignment_0_0");
					put(grammarAccess.getStatementAccess().getActionStatementAssignment_0_1(), "rule__Statement__ActionStatementAssignment_0_1");
					put(grammarAccess.getStatementAccess().getIsChangeStateAssignment_1_0(), "rule__Statement__IsChangeStateAssignment_1_0");
					put(grammarAccess.getStatementAccess().getChangeStateStatementAssignment_1_1(), "rule__Statement__ChangeStateStatementAssignment_1_1");
					put(grammarAccess.getStatementAccess().getAssertStatementAssignment_2(), "rule__Statement__AssertStatementAssignment_2");
					put(grammarAccess.getActionStatementAccess().getActionAssignment_0(), "rule__ActionStatement__ActionAssignment_0");
					put(grammarAccess.getActionStatementAccess().getInputsAssignment_2(), "rule__ActionStatement__InputsAssignment_2");
					put(grammarAccess.getAssertStatementAccess().getInputAssignment_0(), "rule__AssertStatement__InputAssignment_0");
					put(grammarAccess.getAssertStatementAccess().getValueAssignment_2(), "rule__AssertStatement__ValueAssignment_2");
					put(grammarAccess.getChangeStateStatementAccess().getTargetStateAssignment_1(), "rule__ChangeStateStatement__TargetStateAssignment_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
					put(grammarAccess.getTermAccess().getRightAssignment_1_1(), "rule__Term__RightAssignment_1_1");
					put(grammarAccess.getFactorAccess().getNumberAssignment_0(), "rule__Factor__NumberAssignment_0");
					put(grammarAccess.getFactorAccess().getVariableAssignment_1(), "rule__Factor__VariableAssignment_1");
					put(grammarAccess.getFactorAccess().getStringAssignment_2(), "rule__Factor__StringAssignment_2");
					put(grammarAccess.getFactorAccess().getBooleanAssignment_3(), "rule__Factor__BooleanAssignment_3");
					put(grammarAccess.getFactorAccess().getExpressionAssignment_4_1(), "rule__Factor__ExpressionAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
