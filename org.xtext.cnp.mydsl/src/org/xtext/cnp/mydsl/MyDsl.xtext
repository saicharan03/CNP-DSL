grammar org.xtext.cnp.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/cnp/mydsl/MyDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

	Model:
		'AgentAttributes'
		agentAttributes = ClassAttributes
		'TaskAttributes'
		taskAttributes = ClassAttributes
		'BidAttributes'
		bidAttributes = ClassAttributes
		'ContractAttributes'
		contractAttributes = ClassAttributes
		organizationalModel = OrganizationalModel
		tasksModel = TasksModel
		(contractNetProtocols+=ContractNetProtocol)*	
	;
	Type:
		Class|DataType
	;
	DataType:
		'String'|'boolean'|'int'|'double'
	;
	Class:
		'Agent'|'Task'|'Contract'|'Bid'
	;
	AbstractType:
		(type=Type)|
		(listType?='List''<'type=Type'>')
	;
	ClassAttributes:
		'{'(agentAttributes += Attribute)+'}';
	OrganizationalModel:
		'OrganizationalModel'
		(agents+=Agent)+		
		'end OrganizationalModel';
	Agent:
		'Agent' name=ID '{'
		(attributeValues += AttributeValue)*
		'}';
	TasksModel:
	    'TasksModel'
	    (tasks+=Task)+
	    'end TasksModel'; 
	Task:
	   	'Task' name=ID '{'
	     (attributeValues += AttributeValue)*
	   	'}';
	ContractNetProtocol:	
		'ContractNetProtocal'name=ID	
			(variables+=Variable)*
			'RoleBehaviors'
			(roleBehavior += RoleBehavior)*
			'end RoleBehaviors'
		'end ContractNetProtocal';

	RoleBehavior: 	
 	"role" name=ID "{"
 	'actions''{'(actions+=Action)*'}'
	(states += State)+
 	'start at' startState=[State]
 	'stop at' endState=[State]
	"}"
	;	
	
	Attribute:
		type=AbstractType name=ID ('default'default=Parameter)?
	;
	AttributeValue:
		attribute=[Attribute]'='value=Parameter
	;	
	Variable:
		type=AbstractType name=ID
	;
	VariableDeclaration:
		Variable {VariableDeclaration.variable=current} '='value=Expression
	;

	Action:
		'action'name=ID
		'('(inputs+=Variable)?(','inputs+=Variable)*')'
	;
	State:
		(backgroundState?="backgroundState" name = ID)|
		("state" name = ID "{"
			(variables+=Variable)*
			(activities += Activity)+
		"}")
	;
	Activity:
		(declarations+=VariableDeclaration)*
		'if' '('(if=Condition)')' 
		'{'(then+=Statement)+'}'
		('else' (elseif=Activity|'{'(else+=Statement)+'}'))?
	;
    Operator:
		(equalTo?='==')|(largerThan?='>')|(smallerThan?='<')
		|(largerOrEqualTo?='>=')|(smallerOrEqualTo?='<=')|(notEqualTo?='!=')
	;
	Condition:
		(subjective=QualifiedName operator=Operator objective= Expression)
		(((and?='and')|(or?='or')) compareCondition=Condition)?
	;
	Statement:
		(isAction?='Do'actionStatement=ActionStatement)
		|(isChangeState?="->"changeStateStatement=ChangeStateStatement)
		|(assertStatement=AssertStatement)
	;
	ActionStatement:
		action = [Action]
		'('(inputs+=QualifiedName)*')'
	;
	AssertStatement:
		input=QualifiedName'='value=Expression
	;	
	ChangeStateStatement:
		"state" targetState = [State]
	;
	// ----------------------------------------------------------------------	
	Expression:
    Term (({Plus.left=current}'+'|{Minus.left=current}'-') right=Term)*
    ;
	Term:
    Factor (({Multiply.left=current} '*'| {Division.left=current}'/') right=Factor)*
    ;
	Factor:
    number=Number|variable=QualifiedName|string=STRING |boolean=BOOLEAN|('(' expression=Expression ')')
    ;
    // ----------------------------------------------------------------------
	Number:
		INT|DOUBLE
	;
	Parameter:
		Number|STRING|ID|BOOLEAN
	; 	
	QualifiedName:
		ID ('.' ID)*('.' INT)*
	;
	terminal DOUBLE returns ecore::EDouble:
		('0'..'9')+('.' ('0'..'9')+)
	;
	terminal BOOLEAN returns ecore::EBoolean:
		'false'|'true'
	;		
