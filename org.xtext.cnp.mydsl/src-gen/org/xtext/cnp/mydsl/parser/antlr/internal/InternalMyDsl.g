/*
 * generated by Xtext 2.9.0.rc1
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.cnp.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.cnp.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.cnp.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AgentAttributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getAgentAttributesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getAgentAttributesClassAttributesParserRuleCall_1_0());
				}
				lv_agentAttributes_1_0=ruleClassAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"agentAttributes",
						lv_agentAttributes_1_0,
						"org.xtext.cnp.mydsl.MyDsl.ClassAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='TaskAttributes'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getTaskAttributesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTaskAttributesClassAttributesParserRuleCall_3_0());
				}
				lv_taskAttributes_3_0=ruleClassAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"taskAttributes",
						lv_taskAttributes_3_0,
						"org.xtext.cnp.mydsl.MyDsl.ClassAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='BidAttributes'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getBidAttributesKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getBidAttributesClassAttributesParserRuleCall_5_0());
				}
				lv_bidAttributes_5_0=ruleClassAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"bidAttributes",
						lv_bidAttributes_5_0,
						"org.xtext.cnp.mydsl.MyDsl.ClassAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='ContractAttributes'
		{
			newLeafNode(otherlv_6, grammarAccess.getModelAccess().getContractAttributesKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getContractAttributesClassAttributesParserRuleCall_7_0());
				}
				lv_contractAttributes_7_0=ruleClassAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"contractAttributes",
						lv_contractAttributes_7_0,
						"org.xtext.cnp.mydsl.MyDsl.ClassAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getOrganizationalModelOrganizationalModelParserRuleCall_8_0());
				}
				lv_organizationalModel_8_0=ruleOrganizationalModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"organizationalModel",
						lv_organizationalModel_8_0,
						"org.xtext.cnp.mydsl.MyDsl.OrganizationalModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTasksModelTasksModelParserRuleCall_9_0());
				}
				lv_tasksModel_9_0=ruleTasksModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"tasksModel",
						lv_tasksModel_9_0,
						"org.xtext.cnp.mydsl.MyDsl.TasksModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getContractNetProtocolsContractNetProtocolParserRuleCall_10_0());
				}
				lv_contractNetProtocols_10_0=ruleContractNetProtocol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"contractNetProtocols",
						lv_contractNetProtocols_10_0,
						"org.xtext.cnp.mydsl.MyDsl.ContractNetProtocol");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current.merge(this_Class_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_1());
		}
		this_DataType_1=ruleDataType
		{
			$current.merge(this_DataType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current.getText(); }
	EOF;

// Rule DataType
ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getStringKeyword_0());
		}
		    |
		kw='boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getBooleanKeyword_1());
		}
		    |
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getIntKeyword_2());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getDoubleKeyword_3());
		}
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current.getText(); }
	EOF;

// Rule Class
ruleClass returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Agent'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassAccess().getAgentKeyword_0());
		}
		    |
		kw='Task'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassAccess().getTaskKeyword_1());
		}
		    |
		kw='Contract'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassAccess().getContractKeyword_2());
		}
		    |
		kw='Bid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassAccess().getBidKeyword_3());
		}
	)
;

// Entry rule entryRuleAbstractType
entryRuleAbstractType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeRule()); }
	iv_ruleAbstractType=ruleAbstractType
	{ $current=$iv_ruleAbstractType.current; }
	EOF;

// Rule AbstractType
ruleAbstractType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractTypeAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.cnp.mydsl.MyDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_listType_1_0='List'
					{
						newLeafNode(lv_listType_1_0, grammarAccess.getAbstractTypeAccess().getListTypeListKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAbstractTypeRule());
						}
						setWithLastConsumed($current, "listType", true, "List");
					}
				)
			)
			otherlv_2='<'
			{
				newLeafNode(otherlv_2, grammarAccess.getAbstractTypeAccess().getLessThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAbstractTypeAccess().getTypeTypeParserRuleCall_1_2_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.xtext.cnp.mydsl.MyDsl.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='>'
			{
				newLeafNode(otherlv_4, grammarAccess.getAbstractTypeAccess().getGreaterThanSignKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleClassAttributes
entryRuleClassAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassAttributesRule()); }
	iv_ruleClassAttributes=ruleClassAttributes
	{ $current=$iv_ruleClassAttributes.current; }
	EOF;

// Rule ClassAttributes
ruleClassAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAttributesAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAttributesAccess().getAgentAttributesAttributeParserRuleCall_1_0());
				}
				lv_agentAttributes_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassAttributesRule());
					}
					add(
						$current,
						"agentAttributes",
						lv_agentAttributes_1_0,
						"org.xtext.cnp.mydsl.MyDsl.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getClassAttributesAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleOrganizationalModel
entryRuleOrganizationalModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrganizationalModelRule()); }
	iv_ruleOrganizationalModel=ruleOrganizationalModel
	{ $current=$iv_ruleOrganizationalModel.current; }
	EOF;

// Rule OrganizationalModel
ruleOrganizationalModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='OrganizationalModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getOrganizationalModelAccess().getOrganizationalModelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrganizationalModelAccess().getAgentsAgentParserRuleCall_1_0());
				}
				lv_agents_1_0=ruleAgent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrganizationalModelRule());
					}
					add(
						$current,
						"agents",
						lv_agents_1_0,
						"org.xtext.cnp.mydsl.MyDsl.Agent");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='end OrganizationalModel'
		{
			newLeafNode(otherlv_2, grammarAccess.getOrganizationalModelAccess().getEndOrganizationalModelKeyword_2());
		}
	)
;

// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	iv_ruleAgent=ruleAgent
	{ $current=$iv_ruleAgent.current; }
	EOF;

// Rule Agent
ruleAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Agent'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgentAccess().getAgentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentAccess().getAttributeValuesAttributeValueParserRuleCall_3_0());
				}
				lv_attributeValues_3_0=ruleAttributeValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentRule());
					}
					add(
						$current,
						"attributeValues",
						lv_attributeValues_3_0,
						"org.xtext.cnp.mydsl.MyDsl.AttributeValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTasksModel
entryRuleTasksModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTasksModelRule()); }
	iv_ruleTasksModel=ruleTasksModel
	{ $current=$iv_ruleTasksModel.current; }
	EOF;

// Rule TasksModel
ruleTasksModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TasksModel'
		{
			newLeafNode(otherlv_0, grammarAccess.getTasksModelAccess().getTasksModelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTasksModelAccess().getTasksTaskParserRuleCall_1_0());
				}
				lv_tasks_1_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTasksModelRule());
					}
					add(
						$current,
						"tasks",
						lv_tasks_1_0,
						"org.xtext.cnp.mydsl.MyDsl.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='end TasksModel'
		{
			newLeafNode(otherlv_2, grammarAccess.getTasksModelAccess().getEndTasksModelKeyword_2());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getAttributeValuesAttributeValueParserRuleCall_3_0());
				}
				lv_attributeValues_3_0=ruleAttributeValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"attributeValues",
						lv_attributeValues_3_0,
						"org.xtext.cnp.mydsl.MyDsl.AttributeValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleContractNetProtocol
entryRuleContractNetProtocol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractNetProtocolRule()); }
	iv_ruleContractNetProtocol=ruleContractNetProtocol
	{ $current=$iv_ruleContractNetProtocol.current; }
	EOF;

// Rule ContractNetProtocol
ruleContractNetProtocol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ContractNetProtocal'
		{
			newLeafNode(otherlv_0, grammarAccess.getContractNetProtocolAccess().getContractNetProtocalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContractNetProtocolAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContractNetProtocolRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContractNetProtocolAccess().getVariablesVariableParserRuleCall_2_0());
				}
				lv_variables_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractNetProtocolRule());
					}
					add(
						$current,
						"variables",
						lv_variables_2_0,
						"org.xtext.cnp.mydsl.MyDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='RoleBehaviors'
		{
			newLeafNode(otherlv_3, grammarAccess.getContractNetProtocolAccess().getRoleBehaviorsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContractNetProtocolAccess().getRoleBehaviorRoleBehaviorParserRuleCall_4_0());
				}
				lv_roleBehavior_4_0=ruleRoleBehavior
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractNetProtocolRule());
					}
					add(
						$current,
						"roleBehavior",
						lv_roleBehavior_4_0,
						"org.xtext.cnp.mydsl.MyDsl.RoleBehavior");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end RoleBehaviors'
		{
			newLeafNode(otherlv_5, grammarAccess.getContractNetProtocolAccess().getEndRoleBehaviorsKeyword_5());
		}
		otherlv_6='end ContractNetProtocal'
		{
			newLeafNode(otherlv_6, grammarAccess.getContractNetProtocolAccess().getEndContractNetProtocalKeyword_6());
		}
	)
;

// Entry rule entryRuleRoleBehavior
entryRuleRoleBehavior returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleBehaviorRule()); }
	iv_ruleRoleBehavior=ruleRoleBehavior
	{ $current=$iv_ruleRoleBehavior.current; }
	EOF;

// Rule RoleBehavior
ruleRoleBehavior returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='role'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleBehaviorAccess().getRoleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoleBehaviorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleBehaviorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoleBehaviorAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='actions'
		{
			newLeafNode(otherlv_3, grammarAccess.getRoleBehaviorAccess().getActionsKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoleBehaviorAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleBehaviorAccess().getActionsActionParserRuleCall_5_0());
				}
				lv_actions_5_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleBehaviorRule());
					}
					add(
						$current,
						"actions",
						lv_actions_5_0,
						"org.xtext.cnp.mydsl.MyDsl.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRoleBehaviorAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleBehaviorAccess().getStatesStateParserRuleCall_7_0());
				}
				lv_states_7_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleBehaviorRule());
					}
					add(
						$current,
						"states",
						lv_states_7_0,
						"org.xtext.cnp.mydsl.MyDsl.State");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='start at'
		{
			newLeafNode(otherlv_8, grammarAccess.getRoleBehaviorAccess().getStartAtKeyword_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleBehaviorRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getRoleBehaviorAccess().getStartStateStateCrossReference_9_0());
				}
			)
		)
		otherlv_10='stop at'
		{
			newLeafNode(otherlv_10, grammarAccess.getRoleBehaviorAccess().getStopAtKeyword_10());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleBehaviorRule());
					}
				}
				otherlv_11=RULE_ID
				{
					newLeafNode(otherlv_11, grammarAccess.getRoleBehaviorAccess().getEndStateStateCrossReference_11_0());
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getRoleBehaviorAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeAbstractTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleAbstractType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.cnp.mydsl.MyDsl.AbstractType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='default'
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getDefaultKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getDefaultParameterParserRuleCall_2_1_0());
					}
					lv_default_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"default",
							lv_default_3_0,
							"org.xtext.cnp.mydsl.MyDsl.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	iv_ruleAttributeValue=ruleAttributeValue
	{ $current=$iv_ruleAttributeValue.current; }
	EOF;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeValueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAttributeValueAccess().getAttributeAttributeCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeValueAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeValueAccess().getValueParameterParserRuleCall_2_0());
				}
				lv_value_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeValueRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.cnp.mydsl.MyDsl.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTypeAbstractTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleAbstractType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.cnp.mydsl.MyDsl.AbstractType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			{
				$current = forceCreateModelElementAndSet(
					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationVariableAction_1(),
					$current);
			}
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.cnp.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='action'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionAccess().getActionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getInputsVariableParserRuleCall_3_0());
				}
				lv_inputs_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_3_0,
						"org.xtext.cnp.mydsl.MyDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getActionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getInputsVariableParserRuleCall_4_1_0());
					}
					lv_inputs_5_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getActionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_backgroundState_0_0='backgroundState'
					{
						newLeafNode(lv_backgroundState_0_0, grammarAccess.getStateAccess().getBackgroundStateBackgroundStateKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateRule());
						}
						setWithLastConsumed($current, "backgroundState", true, "backgroundState");
					}
				)
			)
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_2='state'
			{
				newLeafNode(otherlv_2, grammarAccess.getStateAccess().getStateKeyword_1_0());
			}
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStateAccess().getVariablesVariableParserRuleCall_1_3_0());
					}
					lv_variables_5_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStateRule());
						}
						add(
							$current,
							"variables",
							lv_variables_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getStateAccess().getActivitiesActivityParserRuleCall_1_4_0());
					}
					lv_activities_6_0=ruleActivity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStateRule());
						}
						add(
							$current,
							"activities",
							lv_activities_6_0,
							"org.xtext.cnp.mydsl.MyDsl.Activity");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityRule()); }
	iv_ruleActivity=ruleActivity
	{ $current=$iv_ruleActivity.current; }
	EOF;

// Rule Activity
ruleActivity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityAccess().getDeclarationsVariableDeclarationParserRuleCall_0_0());
				}
				lv_declarations_0_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_0_0,
						"org.xtext.cnp.mydsl.MyDsl.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getActivityAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getActivityAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityAccess().getIfConditionParserRuleCall_3_0());
				}
				lv_if_3_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityRule());
					}
					set(
						$current,
						"if",
						lv_if_3_0,
						"org.xtext.cnp.mydsl.MyDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getActivityAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityAccess().getThenStatementParserRuleCall_6_0());
				}
				lv_then_6_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityRule());
					}
					add(
						$current,
						"then",
						lv_then_6_0,
						"org.xtext.cnp.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_7());
		}
		(
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getActivityAccess().getElseKeyword_8_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getActivityAccess().getElseifActivityParserRuleCall_8_1_0_0());
						}
						lv_elseif_9_0=ruleActivity
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActivityRule());
							}
							set(
								$current,
								"elseif",
								lv_elseif_9_0,
								"org.xtext.cnp.mydsl.MyDsl.Activity");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					otherlv_10='{'
					{
						newLeafNode(otherlv_10, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_8_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getActivityAccess().getElseStatementParserRuleCall_8_1_1_1_0());
							}
							lv_else_11_0=ruleStatement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getActivityRule());
								}
								add(
									$current,
									"else",
									lv_else_11_0,
									"org.xtext.cnp.mydsl.MyDsl.Statement");
								afterParserOrEnumRuleCall();
							}
						)
					)+
					otherlv_12='}'
					{
						newLeafNode(otherlv_12, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_8_1_1_2());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_equalTo_0_0='=='
				{
					newLeafNode(lv_equalTo_0_0, grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "equalTo", true, "==");
				}
			)
		)
		    |
		(
			(
				lv_largerThan_1_0='>'
				{
					newLeafNode(lv_largerThan_1_0, grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "largerThan", true, ">");
				}
			)
		)
		    |
		(
			(
				lv_smallerThan_2_0='<'
				{
					newLeafNode(lv_smallerThan_2_0, grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "smallerThan", true, "<");
				}
			)
		)
		    |
		(
			(
				lv_largerOrEqualTo_3_0='>='
				{
					newLeafNode(lv_largerOrEqualTo_3_0, grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "largerOrEqualTo", true, ">=");
				}
			)
		)
		    |
		(
			(
				lv_smallerOrEqualTo_4_0='<='
				{
					newLeafNode(lv_smallerOrEqualTo_4_0, grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "smallerOrEqualTo", true, "<=");
				}
			)
		)
		    |
		(
			(
				lv_notEqualTo_5_0='!='
				{
					newLeafNode(lv_notEqualTo_5_0, grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed($current, "notEqualTo", true, "!=");
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getSubjectiveQualifiedNameParserRuleCall_0_0_0());
					}
					lv_subjective_0_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"subjective",
							lv_subjective_0_0,
							"org.xtext.cnp.mydsl.MyDsl.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"org.xtext.cnp.mydsl.MyDsl.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getObjectiveExpressionParserRuleCall_0_2_0());
					}
					lv_objective_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"objective",
							lv_objective_2_0,
							"org.xtext.cnp.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(
					(
						lv_and_3_0='and'
						{
							newLeafNode(lv_and_3_0, grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConditionRule());
							}
							setWithLastConsumed($current, "and", true, "and");
						}
					)
				)
				    |
				(
					(
						lv_or_4_0='or'
						{
							newLeafNode(lv_or_4_0, grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConditionRule());
							}
							setWithLastConsumed($current, "or", true, "or");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getCompareConditionConditionParserRuleCall_1_1_0());
					}
					lv_compareCondition_5_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"compareCondition",
							lv_compareCondition_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_isAction_0_0='Do'
					{
						newLeafNode(lv_isAction_0_0, grammarAccess.getStatementAccess().getIsActionDoKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "isAction", true, "Do");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getActionStatementActionStatementParserRuleCall_0_1_0());
					}
					lv_actionStatement_1_0=ruleActionStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"actionStatement",
							lv_actionStatement_1_0,
							"org.xtext.cnp.mydsl.MyDsl.ActionStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_isChangeState_2_0='->'
					{
						newLeafNode(lv_isChangeState_2_0, grammarAccess.getStatementAccess().getIsChangeStateHyphenMinusGreaterThanSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "isChangeState", true, "->");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getChangeStateStatementChangeStateStatementParserRuleCall_1_1_0());
					}
					lv_changeStateStatement_3_0=ruleChangeStateStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"changeStateStatement",
							lv_changeStateStatement_3_0,
							"org.xtext.cnp.mydsl.MyDsl.ChangeStateStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getAssertStatementAssertStatementParserRuleCall_2_0());
				}
				lv_assertStatement_4_0=ruleAssertStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"assertStatement",
						lv_assertStatement_4_0,
						"org.xtext.cnp.mydsl.MyDsl.AssertStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionStatement
entryRuleActionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionStatementRule()); }
	iv_ruleActionStatement=ruleActionStatement
	{ $current=$iv_ruleActionStatement.current; }
	EOF;

// Rule ActionStatement
ruleActionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionStatementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getActionStatementAccess().getActionActionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getActionStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionStatementAccess().getInputsQualifiedNameParserRuleCall_2_0());
				}
				lv_inputs_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionStatementRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_2_0,
						"org.xtext.cnp.mydsl.MyDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getActionStatementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAssertStatement
entryRuleAssertStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertStatementRule()); }
	iv_ruleAssertStatement=ruleAssertStatement
	{ $current=$iv_ruleAssertStatement.current; }
	EOF;

// Rule AssertStatement
ruleAssertStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertStatementAccess().getInputQualifiedNameParserRuleCall_0_0());
				}
				lv_input_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertStatementRule());
					}
					set(
						$current,
						"input",
						lv_input_0_0,
						"org.xtext.cnp.mydsl.MyDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssertStatementAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertStatementAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.cnp.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChangeStateStatement
entryRuleChangeStateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeStateStatementRule()); }
	iv_ruleChangeStateStatement=ruleChangeStateStatement
	{ $current=$iv_ruleChangeStateStatement.current; }
	EOF;

// Rule ChangeStateStatement
ruleChangeStateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='state'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeStateStatementAccess().getStateKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeStateStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getChangeStateStatementAccess().getTargetStateStateCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExpressionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExpressionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getTermAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"org.xtext.cnp.mydsl.MyDsl.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getVariableQualifiedNameParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.cnp.mydsl.MyDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getFactorAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_boolean_3_0=RULE_BOOLEAN
				{
					newLeafNode(lv_boolean_3_0, grammarAccess.getFactorAccess().getBooleanBOOLEANTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"boolean",
						lv_boolean_3_0,
						"org.xtext.cnp.mydsl.MyDsl.BOOLEAN");
				}
			)
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_4_1_0());
					}
					lv_expression_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.xtext.cnp.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getRightParenthesisKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current.getText(); }
	EOF;

// Rule Parameter
ruleParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterAccess().getNumberParserRuleCall_0());
		}
		this_Number_0=ruleNumber
		{
			$current.merge(this_Number_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getParameterAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getParameterAccess().getIDTerminalRuleCall_2());
		}
		    |
		this_BOOLEAN_3=RULE_BOOLEAN
		{
			$current.merge(this_BOOLEAN_3);
		}
		{
			newLeafNode(this_BOOLEAN_3, grammarAccess.getParameterAccess().getBOOLEANTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_1());
			}
		)*
	)
;

RULE_DOUBLE : ('0'..'9')+ '.' ('0'..'9')+;

RULE_BOOLEAN : ('false'|'true');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
