/*
 * generated by Xtext 2.9.0.rc1
 */
package org.xtext.cnp.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentAttributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentAttributesClassAttributesParserRuleCall_1_0 = (RuleCall)cAgentAttributesAssignment_1.eContents().get(0);
		private final Keyword cTaskAttributesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTaskAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTaskAttributesClassAttributesParserRuleCall_3_0 = (RuleCall)cTaskAttributesAssignment_3.eContents().get(0);
		private final Keyword cBidAttributesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBidAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBidAttributesClassAttributesParserRuleCall_5_0 = (RuleCall)cBidAttributesAssignment_5.eContents().get(0);
		private final Keyword cContractAttributesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContractAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContractAttributesClassAttributesParserRuleCall_7_0 = (RuleCall)cContractAttributesAssignment_7.eContents().get(0);
		private final Assignment cOrganizationalModelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOrganizationalModelOrganizationalModelParserRuleCall_8_0 = (RuleCall)cOrganizationalModelAssignment_8.eContents().get(0);
		private final Assignment cTasksModelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTasksModelTasksModelParserRuleCall_9_0 = (RuleCall)cTasksModelAssignment_9.eContents().get(0);
		private final Assignment cContractNetProtocolsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cContractNetProtocolsContractNetProtocolParserRuleCall_10_0 = (RuleCall)cContractNetProtocolsAssignment_10.eContents().get(0);
		
		//Model:
		//	'AgentAttributes'
		//	agentAttributes=ClassAttributes
		//	'TaskAttributes'
		//	taskAttributes=ClassAttributes
		//	'BidAttributes'
		//	bidAttributes=ClassAttributes
		//	'ContractAttributes'
		//	contractAttributes=ClassAttributes
		//	organizationalModel=OrganizationalModel
		//	tasksModel=TasksModel
		//	contractNetProtocols+=ContractNetProtocol*;
		@Override public ParserRule getRule() { return rule; }
		
		//'AgentAttributes' agentAttributes=ClassAttributes 'TaskAttributes' taskAttributes=ClassAttributes 'BidAttributes'
		//bidAttributes=ClassAttributes 'ContractAttributes' contractAttributes=ClassAttributes
		//organizationalModel=OrganizationalModel tasksModel=TasksModel contractNetProtocols+=ContractNetProtocol*
		public Group getGroup() { return cGroup; }
		
		//'AgentAttributes'
		public Keyword getAgentAttributesKeyword_0() { return cAgentAttributesKeyword_0; }
		
		//agentAttributes=ClassAttributes
		public Assignment getAgentAttributesAssignment_1() { return cAgentAttributesAssignment_1; }
		
		//ClassAttributes
		public RuleCall getAgentAttributesClassAttributesParserRuleCall_1_0() { return cAgentAttributesClassAttributesParserRuleCall_1_0; }
		
		//'TaskAttributes'
		public Keyword getTaskAttributesKeyword_2() { return cTaskAttributesKeyword_2; }
		
		//taskAttributes=ClassAttributes
		public Assignment getTaskAttributesAssignment_3() { return cTaskAttributesAssignment_3; }
		
		//ClassAttributes
		public RuleCall getTaskAttributesClassAttributesParserRuleCall_3_0() { return cTaskAttributesClassAttributesParserRuleCall_3_0; }
		
		//'BidAttributes'
		public Keyword getBidAttributesKeyword_4() { return cBidAttributesKeyword_4; }
		
		//bidAttributes=ClassAttributes
		public Assignment getBidAttributesAssignment_5() { return cBidAttributesAssignment_5; }
		
		//ClassAttributes
		public RuleCall getBidAttributesClassAttributesParserRuleCall_5_0() { return cBidAttributesClassAttributesParserRuleCall_5_0; }
		
		//'ContractAttributes'
		public Keyword getContractAttributesKeyword_6() { return cContractAttributesKeyword_6; }
		
		//contractAttributes=ClassAttributes
		public Assignment getContractAttributesAssignment_7() { return cContractAttributesAssignment_7; }
		
		//ClassAttributes
		public RuleCall getContractAttributesClassAttributesParserRuleCall_7_0() { return cContractAttributesClassAttributesParserRuleCall_7_0; }
		
		//organizationalModel=OrganizationalModel
		public Assignment getOrganizationalModelAssignment_8() { return cOrganizationalModelAssignment_8; }
		
		//OrganizationalModel
		public RuleCall getOrganizationalModelOrganizationalModelParserRuleCall_8_0() { return cOrganizationalModelOrganizationalModelParserRuleCall_8_0; }
		
		//tasksModel=TasksModel
		public Assignment getTasksModelAssignment_9() { return cTasksModelAssignment_9; }
		
		//TasksModel
		public RuleCall getTasksModelTasksModelParserRuleCall_9_0() { return cTasksModelTasksModelParserRuleCall_9_0; }
		
		//contractNetProtocols+=ContractNetProtocol*
		public Assignment getContractNetProtocolsAssignment_10() { return cContractNetProtocolsAssignment_10; }
		
		//ContractNetProtocol
		public RuleCall getContractNetProtocolsContractNetProtocolParserRuleCall_10_0() { return cContractNetProtocolsContractNetProtocolParserRuleCall_10_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Class | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DataType:
		//	'String' | 'boolean' | 'int' | 'double';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'boolean' | 'int' | 'double'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//'int'
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }
		
		//'double'
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Class");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cContractKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBidKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Class:
		//	'Agent' | 'Task' | 'Contract' | 'Bid';
		@Override public ParserRule getRule() { return rule; }
		
		//'Agent' | 'Task' | 'Contract' | 'Bid'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//'Task'
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//'Contract'
		public Keyword getContractKeyword_2() { return cContractKeyword_2; }
		
		//'Bid'
		public Keyword getBidKeyword_3() { return cBidKeyword_3; }
	}
	public class AbstractTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.AbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cListTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cListTypeListKeyword_1_0_0 = (Keyword)cListTypeAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//AbstractType:
		//	type=Type | listType?='List' '<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type | listType?='List' '<' type=Type '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//listType?='List' '<' type=Type '>'
		public Group getGroup_1() { return cGroup_1; }
		
		//listType?='List'
		public Assignment getListTypeAssignment_1_0() { return cListTypeAssignment_1_0; }
		
		//'List'
		public Keyword getListTypeListKeyword_1_0_0() { return cListTypeListKeyword_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//type=Type
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_2_0() { return cTypeTypeParserRuleCall_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class ClassAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.ClassAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAgentAttributesAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClassAttributes:
		//	'{' agentAttributes+=Attribute+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' agentAttributes+=Attribute+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//agentAttributes+=Attribute+
		public Assignment getAgentAttributesAssignment_1() { return cAgentAttributesAssignment_1; }
		
		//Attribute
		public RuleCall getAgentAttributesAttributeParserRuleCall_1_0() { return cAgentAttributesAttributeParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class OrganizationalModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.OrganizationalModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrganizationalModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentsAgentParserRuleCall_1_0 = (RuleCall)cAgentsAssignment_1.eContents().get(0);
		private final Keyword cEndOrganizationalModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OrganizationalModel:
		//	'OrganizationalModel'
		//	agents+=Agent+
		//	'end OrganizationalModel';
		@Override public ParserRule getRule() { return rule; }
		
		//'OrganizationalModel' agents+=Agent+ 'end OrganizationalModel'
		public Group getGroup() { return cGroup; }
		
		//'OrganizationalModel'
		public Keyword getOrganizationalModelKeyword_0() { return cOrganizationalModelKeyword_0; }
		
		//agents+=Agent+
		public Assignment getAgentsAssignment_1() { return cAgentsAssignment_1; }
		
		//Agent
		public RuleCall getAgentsAgentParserRuleCall_1_0() { return cAgentsAgentParserRuleCall_1_0; }
		
		//'end OrganizationalModel'
		public Keyword getEndOrganizationalModelKeyword_2() { return cEndOrganizationalModelKeyword_2; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeValuesAttributeValueParserRuleCall_3_0 = (RuleCall)cAttributeValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Agent:
		//	'Agent' name=ID '{'
		//	attributeValues+=AttributeValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Agent' name=ID '{' attributeValues+=AttributeValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributeValues+=AttributeValue*
		public Assignment getAttributeValuesAssignment_3() { return cAttributeValuesAssignment_3; }
		
		//AttributeValue
		public RuleCall getAttributeValuesAttributeValueParserRuleCall_3_0() { return cAttributeValuesAttributeValueParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TasksModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.TasksModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTasksModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		private final Keyword cEndTasksModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TasksModel:
		//	'TasksModel'
		//	tasks+=Task+
		//	'end TasksModel';
		@Override public ParserRule getRule() { return rule; }
		
		//'TasksModel' tasks+=Task+ 'end TasksModel'
		public Group getGroup() { return cGroup; }
		
		//'TasksModel'
		public Keyword getTasksModelKeyword_0() { return cTasksModelKeyword_0; }
		
		//tasks+=Task+
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
		
		//'end TasksModel'
		public Keyword getEndTasksModelKeyword_2() { return cEndTasksModelKeyword_2; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeValuesAttributeValueParserRuleCall_3_0 = (RuleCall)cAttributeValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Task:
		//	'Task' name=ID '{'
		//	attributeValues+=AttributeValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID '{' attributeValues+=AttributeValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributeValues+=AttributeValue*
		public Assignment getAttributeValuesAssignment_3() { return cAttributeValuesAssignment_3; }
		
		//AttributeValue
		public RuleCall getAttributeValuesAttributeValueParserRuleCall_3_0() { return cAttributeValuesAttributeValueParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContractNetProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.ContractNetProtocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractNetProtocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Keyword cRoleBehaviorsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRoleBehaviorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRoleBehaviorRoleBehaviorParserRuleCall_4_0 = (RuleCall)cRoleBehaviorAssignment_4.eContents().get(0);
		private final Keyword cEndRoleBehaviorsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEndContractNetProtocalKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ContractNetProtocol:
		//	'ContractNetProtocal' name=ID
		//	variables+=Variable*
		//	'RoleBehaviors'
		//	roleBehavior+=RoleBehavior*
		//	'end RoleBehaviors'
		//	'end ContractNetProtocal';
		@Override public ParserRule getRule() { return rule; }
		
		//'ContractNetProtocal' name=ID variables+=Variable* 'RoleBehaviors' roleBehavior+=RoleBehavior* 'end RoleBehaviors'
		//'end ContractNetProtocal'
		public Group getGroup() { return cGroup; }
		
		//'ContractNetProtocal'
		public Keyword getContractNetProtocalKeyword_0() { return cContractNetProtocalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }
		
		//'RoleBehaviors'
		public Keyword getRoleBehaviorsKeyword_3() { return cRoleBehaviorsKeyword_3; }
		
		//roleBehavior+=RoleBehavior*
		public Assignment getRoleBehaviorAssignment_4() { return cRoleBehaviorAssignment_4; }
		
		//RoleBehavior
		public RuleCall getRoleBehaviorRoleBehaviorParserRuleCall_4_0() { return cRoleBehaviorRoleBehaviorParserRuleCall_4_0; }
		
		//'end RoleBehaviors'
		public Keyword getEndRoleBehaviorsKeyword_5() { return cEndRoleBehaviorsKeyword_5; }
		
		//'end ContractNetProtocal'
		public Keyword getEndContractNetProtocalKeyword_6() { return cEndContractNetProtocalKeyword_6; }
	}
	public class RoleBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.RoleBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Keyword cStartAtKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStartStateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cStartStateStateCrossReference_9_0 = (CrossReference)cStartStateAssignment_9.eContents().get(0);
		private final RuleCall cStartStateStateIDTerminalRuleCall_9_0_1 = (RuleCall)cStartStateStateCrossReference_9_0.eContents().get(1);
		private final Keyword cStopAtKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cEndStateAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cEndStateStateCrossReference_11_0 = (CrossReference)cEndStateAssignment_11.eContents().get(0);
		private final RuleCall cEndStateStateIDTerminalRuleCall_11_0_1 = (RuleCall)cEndStateStateCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//RoleBehavior:
		//	"role" name=ID "{"
		//	'actions' '{' actions+=Action* '}'
		//	states+=State+
		//	'start at' startState=[State]
		//	'stop at' endState=[State]
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"role" name=ID "{" 'actions' '{' actions+=Action* '}' states+=State+ 'start at' startState=[State] 'stop at'
		//endState=[State] "}"
		public Group getGroup() { return cGroup; }
		
		//"role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'actions'
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//states+=State+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
		
		//'start at'
		public Keyword getStartAtKeyword_8() { return cStartAtKeyword_8; }
		
		//startState=[State]
		public Assignment getStartStateAssignment_9() { return cStartStateAssignment_9; }
		
		//[State]
		public CrossReference getStartStateStateCrossReference_9_0() { return cStartStateStateCrossReference_9_0; }
		
		//ID
		public RuleCall getStartStateStateIDTerminalRuleCall_9_0_1() { return cStartStateStateIDTerminalRuleCall_9_0_1; }
		
		//'stop at'
		public Keyword getStopAtKeyword_10() { return cStopAtKeyword_10; }
		
		//endState=[State]
		public Assignment getEndStateAssignment_11() { return cEndStateAssignment_11; }
		
		//[State]
		public CrossReference getEndStateStateCrossReference_11_0() { return cEndStateStateCrossReference_11_0; }
		
		//ID
		public RuleCall getEndStateStateIDTerminalRuleCall_11_0_1() { return cEndStateStateIDTerminalRuleCall_11_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAbstractTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDefaultKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultParameterParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		//Attribute:
		//	type=AbstractType name=ID ('default' default=Parameter)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=AbstractType name=ID ('default' default=Parameter)?
		public Group getGroup() { return cGroup; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_0_0() { return cTypeAbstractTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('default' default=Parameter)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'default'
		public Keyword getDefaultKeyword_2_0() { return cDefaultKeyword_2_0; }
		
		//default=Parameter
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }
		
		//Parameter
		public RuleCall getDefaultParameterParserRuleCall_2_1_0() { return cDefaultParameterParserRuleCall_2_1_0; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeValue:
		//	attribute=[Attribute] '=' value=Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute] '=' value=Parameter
		public Group getGroup() { return cGroup; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Parameter
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Parameter
		public RuleCall getValueParameterParserRuleCall_2_0() { return cValueParameterParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAbstractTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	type=AbstractType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=AbstractType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=AbstractType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AbstractType
		public RuleCall getTypeAbstractTypeParserRuleCall_0_0() { return cTypeAbstractTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cVariableDeclarationVariableAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	Variable {VariableDeclaration.variable=current} '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable {VariableDeclaration.variable=current} '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//{VariableDeclaration.variable=current}
		public Action getVariableDeclarationVariableAction_1() { return cVariableDeclarationVariableAction_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsVariableParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputsVariableParserRuleCall_4_1_0 = (RuleCall)cInputsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//	'action' name=ID
		//	'(' inputs+=Variable? (',' inputs+=Variable)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID '(' inputs+=Variable? (',' inputs+=Variable)* ')'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//inputs+=Variable?
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_3_0() { return cInputsVariableParserRuleCall_3_0; }
		
		//(',' inputs+=Variable)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//inputs+=Variable
		public Assignment getInputsAssignment_4_1() { return cInputsAssignment_4_1; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_4_1_0() { return cInputsVariableParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBackgroundStateAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cBackgroundStateBackgroundStateKeyword_0_0_0 = (Keyword)cBackgroundStateAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVariablesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVariablesVariableParserRuleCall_1_3_0 = (RuleCall)cVariablesAssignment_1_3.eContents().get(0);
		private final Assignment cActivitiesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cActivitiesActivityParserRuleCall_1_4_0 = (RuleCall)cActivitiesAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//State:
		//	backgroundState?="backgroundState" name=ID | "state" name=ID "{"
		//	variables+=Variable*
		//	activities+=Activity+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//backgroundState?="backgroundState" name=ID | "state" name=ID "{" variables+=Variable* activities+=Activity+ "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//backgroundState?="backgroundState" name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//backgroundState?="backgroundState"
		public Assignment getBackgroundStateAssignment_0_0() { return cBackgroundStateAssignment_0_0; }
		
		//"backgroundState"
		public Keyword getBackgroundStateBackgroundStateKeyword_0_0_0() { return cBackgroundStateBackgroundStateKeyword_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//"state" name=ID "{" variables+=Variable* activities+=Activity+ "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//"state"
		public Keyword getStateKeyword_1_0() { return cStateKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_1_3() { return cVariablesAssignment_1_3; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_3_0() { return cVariablesVariableParserRuleCall_1_3_0; }
		
		//activities+=Activity+
		public Assignment getActivitiesAssignment_1_4() { return cActivitiesAssignment_1_4; }
		
		//Activity
		public RuleCall getActivitiesActivityParserRuleCall_1_4_0() { return cActivitiesActivityParserRuleCall_1_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfConditionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenStatementParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Assignment cElseifAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cElseifActivityParserRuleCall_8_1_0_0 = (RuleCall)cElseifAssignment_8_1_0.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cAlternatives_8_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cElseAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_8_1_1_1_0 = (RuleCall)cElseAssignment_8_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_1_1_2 = (Keyword)cGroup_8_1_1.eContents().get(2);
		
		//Activity:
		//	declarations+=VariableDeclaration*
		//	'if' '(' if=Condition ')'
		//	'{' then+=Statement+ '}' ('else' (elseif=Activity | '{' else+=Statement+ '}'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=VariableDeclaration* 'if' '(' if=Condition ')' '{' then+=Statement+ '}' ('else' (elseif=Activity | '{'
		//else+=Statement+ '}'))?
		public Group getGroup() { return cGroup; }
		
		//declarations+=VariableDeclaration*
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_0_0() { return cDeclarationsVariableDeclarationParserRuleCall_0_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//if=Condition
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }
		
		//Condition
		public RuleCall getIfConditionParserRuleCall_3_0() { return cIfConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//then+=Statement+
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_6_0() { return cThenStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' (elseif=Activity | '{' else+=Statement+ '}'))?
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//elseif=Activity | '{' else+=Statement+ '}'
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//elseif=Activity
		public Assignment getElseifAssignment_8_1_0() { return cElseifAssignment_8_1_0; }
		
		//Activity
		public RuleCall getElseifActivityParserRuleCall_8_1_0_0() { return cElseifActivityParserRuleCall_8_1_0_0; }
		
		//'{' else+=Statement+ '}'
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1_1_0() { return cLeftCurlyBracketKeyword_8_1_1_0; }
		
		//else+=Statement+
		public Assignment getElseAssignment_8_1_1_1() { return cElseAssignment_8_1_1_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_8_1_1_1_0() { return cElseStatementParserRuleCall_8_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1_1_2() { return cRightCurlyBracketKeyword_8_1_1_2; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEqualToAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualToAssignment_0.eContents().get(0);
		private final Assignment cLargerThanAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLargerThanGreaterThanSignKeyword_1_0 = (Keyword)cLargerThanAssignment_1.eContents().get(0);
		private final Assignment cSmallerThanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSmallerThanLessThanSignKeyword_2_0 = (Keyword)cSmallerThanAssignment_2.eContents().get(0);
		private final Assignment cLargerOrEqualToAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cLargerOrEqualToAssignment_3.eContents().get(0);
		private final Assignment cSmallerOrEqualToAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0 = (Keyword)cSmallerOrEqualToAssignment_4.eContents().get(0);
		private final Assignment cNotEqualToAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualToExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualToAssignment_5.eContents().get(0);
		
		//Operator:
		//	equalTo?='==' | largerThan?='>' | smallerThan?='<' | largerOrEqualTo?='>=' | smallerOrEqualTo?='<=' |
		//	notEqualTo?='!=';
		@Override public ParserRule getRule() { return rule; }
		
		//equalTo?='==' | largerThan?='>' | smallerThan?='<' | largerOrEqualTo?='>=' | smallerOrEqualTo?='<=' | notEqualTo?='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equalTo?='=='
		public Assignment getEqualToAssignment_0() { return cEqualToAssignment_0; }
		
		//'=='
		public Keyword getEqualToEqualsSignEqualsSignKeyword_0_0() { return cEqualToEqualsSignEqualsSignKeyword_0_0; }
		
		//largerThan?='>'
		public Assignment getLargerThanAssignment_1() { return cLargerThanAssignment_1; }
		
		//'>'
		public Keyword getLargerThanGreaterThanSignKeyword_1_0() { return cLargerThanGreaterThanSignKeyword_1_0; }
		
		//smallerThan?='<'
		public Assignment getSmallerThanAssignment_2() { return cSmallerThanAssignment_2; }
		
		//'<'
		public Keyword getSmallerThanLessThanSignKeyword_2_0() { return cSmallerThanLessThanSignKeyword_2_0; }
		
		//largerOrEqualTo?='>='
		public Assignment getLargerOrEqualToAssignment_3() { return cLargerOrEqualToAssignment_3; }
		
		//'>='
		public Keyword getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0() { return cLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0; }
		
		//smallerOrEqualTo?='<='
		public Assignment getSmallerOrEqualToAssignment_4() { return cSmallerOrEqualToAssignment_4; }
		
		//'<='
		public Keyword getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0() { return cSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0; }
		
		//notEqualTo?='!='
		public Assignment getNotEqualToAssignment_5() { return cNotEqualToAssignment_5; }
		
		//'!='
		public Keyword getNotEqualToExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualToExclamationMarkEqualsSignKeyword_5_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSubjectiveAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSubjectiveQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cSubjectiveAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cObjectiveAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cObjectiveExpressionParserRuleCall_0_2_0 = (RuleCall)cObjectiveAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cAndAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAndAndKeyword_1_0_0_0 = (Keyword)cAndAssignment_1_0_0.eContents().get(0);
		private final Assignment cOrAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0_1_0 = (Keyword)cOrAssignment_1_0_1.eContents().get(0);
		private final Assignment cCompareConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompareConditionConditionParserRuleCall_1_1_0 = (RuleCall)cCompareConditionAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	(subjective=QualifiedName operator=Operator objective=Expression) ((and?='and' | or?='or')
		//	compareCondition=Condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(subjective=QualifiedName operator=Operator objective=Expression) ((and?='and' | or?='or') compareCondition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//subjective=QualifiedName operator=Operator objective=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//subjective=QualifiedName
		public Assignment getSubjectiveAssignment_0_0() { return cSubjectiveAssignment_0_0; }
		
		//QualifiedName
		public RuleCall getSubjectiveQualifiedNameParserRuleCall_0_0_0() { return cSubjectiveQualifiedNameParserRuleCall_0_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_0_1_0() { return cOperatorOperatorParserRuleCall_0_1_0; }
		
		//objective=Expression
		public Assignment getObjectiveAssignment_0_2() { return cObjectiveAssignment_0_2; }
		
		//Expression
		public RuleCall getObjectiveExpressionParserRuleCall_0_2_0() { return cObjectiveExpressionParserRuleCall_0_2_0; }
		
		//((and?='and' | or?='or') compareCondition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//and?='and' | or?='or'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//and?='and'
		public Assignment getAndAssignment_1_0_0() { return cAndAssignment_1_0_0; }
		
		//'and'
		public Keyword getAndAndKeyword_1_0_0_0() { return cAndAndKeyword_1_0_0_0; }
		
		//or?='or'
		public Assignment getOrAssignment_1_0_1() { return cOrAssignment_1_0_1; }
		
		//'or'
		public Keyword getOrOrKeyword_1_0_1_0() { return cOrOrKeyword_1_0_1_0; }
		
		//compareCondition=Condition
		public Assignment getCompareConditionAssignment_1_1() { return cCompareConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getCompareConditionConditionParserRuleCall_1_1_0() { return cCompareConditionConditionParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIsActionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIsActionDoKeyword_0_0_0 = (Keyword)cIsActionAssignment_0_0.eContents().get(0);
		private final Assignment cActionStatementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActionStatementActionStatementParserRuleCall_0_1_0 = (RuleCall)cActionStatementAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsChangeStateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsChangeStateHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cIsChangeStateAssignment_1_0.eContents().get(0);
		private final Assignment cChangeStateStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChangeStateStatementChangeStateStatementParserRuleCall_1_1_0 = (RuleCall)cChangeStateStatementAssignment_1_1.eContents().get(0);
		private final Assignment cAssertStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAssertStatementAssertStatementParserRuleCall_2_0 = (RuleCall)cAssertStatementAssignment_2.eContents().get(0);
		
		//Statement:
		//	isAction?='Do' actionStatement=ActionStatement | isChangeState?="->" changeStateStatement=ChangeStateStatement |
		//	assertStatement=AssertStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//isAction?='Do' actionStatement=ActionStatement | isChangeState?="->" changeStateStatement=ChangeStateStatement |
		//assertStatement=AssertStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isAction?='Do' actionStatement=ActionStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//isAction?='Do'
		public Assignment getIsActionAssignment_0_0() { return cIsActionAssignment_0_0; }
		
		//'Do'
		public Keyword getIsActionDoKeyword_0_0_0() { return cIsActionDoKeyword_0_0_0; }
		
		//actionStatement=ActionStatement
		public Assignment getActionStatementAssignment_0_1() { return cActionStatementAssignment_0_1; }
		
		//ActionStatement
		public RuleCall getActionStatementActionStatementParserRuleCall_0_1_0() { return cActionStatementActionStatementParserRuleCall_0_1_0; }
		
		//isChangeState?="->" changeStateStatement=ChangeStateStatement
		public Group getGroup_1() { return cGroup_1; }
		
		//isChangeState?="->"
		public Assignment getIsChangeStateAssignment_1_0() { return cIsChangeStateAssignment_1_0; }
		
		//"->"
		public Keyword getIsChangeStateHyphenMinusGreaterThanSignKeyword_1_0_0() { return cIsChangeStateHyphenMinusGreaterThanSignKeyword_1_0_0; }
		
		//changeStateStatement=ChangeStateStatement
		public Assignment getChangeStateStatementAssignment_1_1() { return cChangeStateStatementAssignment_1_1; }
		
		//ChangeStateStatement
		public RuleCall getChangeStateStatementChangeStateStatementParserRuleCall_1_1_0() { return cChangeStateStatementChangeStateStatementParserRuleCall_1_1_0; }
		
		//assertStatement=AssertStatement
		public Assignment getAssertStatementAssignment_2() { return cAssertStatementAssignment_2; }
		
		//AssertStatement
		public RuleCall getAssertStatementAssertStatementParserRuleCall_2_0() { return cAssertStatementAssertStatementParserRuleCall_2_0; }
	}
	public class ActionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.ActionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActionActionCrossReference_0_0 = (CrossReference)cActionAssignment_0.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_0_0_1 = (RuleCall)cActionActionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputsQualifiedNameParserRuleCall_2_0 = (RuleCall)cInputsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionStatement:
		//	action=[Action]
		//	'(' inputs+=QualifiedName* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//action=[Action] '(' inputs+=QualifiedName* ')'
		public Group getGroup() { return cGroup; }
		
		//action=[Action]
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_0_0() { return cActionActionCrossReference_0_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_0_0_1() { return cActionActionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputs+=QualifiedName*
		public Assignment getInputsAssignment_2() { return cInputsAssignment_2; }
		
		//QualifiedName
		public RuleCall getInputsQualifiedNameParserRuleCall_2_0() { return cInputsQualifiedNameParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AssertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.AssertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputQualifiedNameParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AssertStatement:
		//	input=QualifiedName '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//input=QualifiedName '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//input=QualifiedName
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//QualifiedName
		public RuleCall getInputQualifiedNameParserRuleCall_0_0() { return cInputQualifiedNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ChangeStateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.ChangeStateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateStateCrossReference_1_0 = (CrossReference)cTargetStateAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetStateStateCrossReference_1_0.eContents().get(1);
		
		//ChangeStateStatement:
		//	"state" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"state" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_1() { return cTargetStateAssignment_1; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_1_0() { return cTargetStateStateCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_1_0_1() { return cTargetStateStateIDTerminalRuleCall_1_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// ----------------------------------------------------------------------	
		//Expression:
		//	Term (({Plus.left=current} '+' | {Minus.left=current} '-') right=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term (({Plus.left=current} '+' | {Minus.left=current} '-') right=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Term
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_1_0() { return cRightTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Term:
		//	Factor (({Multiply.left=current} '*' | {Division.left=current} '/') right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (({Multiply.left=current} '*' | {Division.left=current} '/') right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(({Multiply.left=current} '*' | {Division.left=current} '/') right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiply.left=current} '*' | {Division.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multiply.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_0() { return cMultiplyLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Division.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableQualifiedNameParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_3_0 = (RuleCall)cBooleanAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Factor:
		//	number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | '(' expression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//variable=QualifiedName
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//QualifiedName
		public RuleCall getVariableQualifiedNameParserRuleCall_1_0() { return cVariableQualifiedNameParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_3_0() { return cBooleanBOOLEANTerminalRuleCall_3_0; }
		
		//'(' expression=Expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ----------------------------------------------------------------------
		//Number:
		//	INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Parameter:
		//	Number | STRING | ID | BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | STRING | ID | BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)* ('.' INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)* ('.' INT)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//('.' INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final TypeElements pType;
	private final DataTypeElements pDataType;
	private final ClassElements pClass;
	private final AbstractTypeElements pAbstractType;
	private final ClassAttributesElements pClassAttributes;
	private final OrganizationalModelElements pOrganizationalModel;
	private final AgentElements pAgent;
	private final TasksModelElements pTasksModel;
	private final TaskElements pTask;
	private final ContractNetProtocolElements pContractNetProtocol;
	private final RoleBehaviorElements pRoleBehavior;
	private final AttributeElements pAttribute;
	private final AttributeValueElements pAttributeValue;
	private final VariableElements pVariable;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ActionElements pAction;
	private final StateElements pState;
	private final ActivityElements pActivity;
	private final OperatorElements pOperator;
	private final ConditionElements pCondition;
	private final StatementElements pStatement;
	private final ActionStatementElements pActionStatement;
	private final AssertStatementElements pAssertStatement;
	private final ChangeStateStatementElements pChangeStateStatement;
	private final ExpressionElements pExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final NumberElements pNumber;
	private final ParameterElements pParameter;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pType = new TypeElements();
		this.pDataType = new DataTypeElements();
		this.pClass = new ClassElements();
		this.pAbstractType = new AbstractTypeElements();
		this.pClassAttributes = new ClassAttributesElements();
		this.pOrganizationalModel = new OrganizationalModelElements();
		this.pAgent = new AgentElements();
		this.pTasksModel = new TasksModelElements();
		this.pTask = new TaskElements();
		this.pContractNetProtocol = new ContractNetProtocolElements();
		this.pRoleBehavior = new RoleBehaviorElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pVariable = new VariableElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pAction = new ActionElements();
		this.pState = new StateElements();
		this.pActivity = new ActivityElements();
		this.pOperator = new OperatorElements();
		this.pCondition = new ConditionElements();
		this.pStatement = new StatementElements();
		this.pActionStatement = new ActionStatementElements();
		this.pAssertStatement = new AssertStatementElements();
		this.pChangeStateStatement = new ChangeStateStatementElements();
		this.pExpression = new ExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pNumber = new NumberElements();
		this.pParameter = new ParameterElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cnp.mydsl.MyDsl.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.cnp.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'AgentAttributes'
	//	agentAttributes=ClassAttributes
	//	'TaskAttributes'
	//	taskAttributes=ClassAttributes
	//	'BidAttributes'
	//	bidAttributes=ClassAttributes
	//	'ContractAttributes'
	//	contractAttributes=ClassAttributes
	//	organizationalModel=OrganizationalModel
	//	tasksModel=TasksModel
	//	contractNetProtocols+=ContractNetProtocol*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Type:
	//	Class | DataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DataType:
	//	'String' | 'boolean' | 'int' | 'double';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Class:
	//	'Agent' | 'Task' | 'Contract' | 'Bid';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//AbstractType:
	//	type=Type | listType?='List' '<' type=Type '>';
	public AbstractTypeElements getAbstractTypeAccess() {
		return pAbstractType;
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}
	
	//ClassAttributes:
	//	'{' agentAttributes+=Attribute+ '}';
	public ClassAttributesElements getClassAttributesAccess() {
		return pClassAttributes;
	}
	
	public ParserRule getClassAttributesRule() {
		return getClassAttributesAccess().getRule();
	}
	
	//OrganizationalModel:
	//	'OrganizationalModel'
	//	agents+=Agent+
	//	'end OrganizationalModel';
	public OrganizationalModelElements getOrganizationalModelAccess() {
		return pOrganizationalModel;
	}
	
	public ParserRule getOrganizationalModelRule() {
		return getOrganizationalModelAccess().getRule();
	}
	
	//Agent:
	//	'Agent' name=ID '{'
	//	attributeValues+=AttributeValue*
	//	'}';
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//TasksModel:
	//	'TasksModel'
	//	tasks+=Task+
	//	'end TasksModel';
	public TasksModelElements getTasksModelAccess() {
		return pTasksModel;
	}
	
	public ParserRule getTasksModelRule() {
		return getTasksModelAccess().getRule();
	}
	
	//Task:
	//	'Task' name=ID '{'
	//	attributeValues+=AttributeValue*
	//	'}';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//ContractNetProtocol:
	//	'ContractNetProtocal' name=ID
	//	variables+=Variable*
	//	'RoleBehaviors'
	//	roleBehavior+=RoleBehavior*
	//	'end RoleBehaviors'
	//	'end ContractNetProtocal';
	public ContractNetProtocolElements getContractNetProtocolAccess() {
		return pContractNetProtocol;
	}
	
	public ParserRule getContractNetProtocolRule() {
		return getContractNetProtocolAccess().getRule();
	}
	
	//RoleBehavior:
	//	"role" name=ID "{"
	//	'actions' '{' actions+=Action* '}'
	//	states+=State+
	//	'start at' startState=[State]
	//	'stop at' endState=[State]
	//	"}";
	public RoleBehaviorElements getRoleBehaviorAccess() {
		return pRoleBehavior;
	}
	
	public ParserRule getRoleBehaviorRule() {
		return getRoleBehaviorAccess().getRule();
	}
	
	//Attribute:
	//	type=AbstractType name=ID ('default' default=Parameter)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeValue:
	//	attribute=[Attribute] '=' value=Parameter;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//Variable:
	//	type=AbstractType name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableDeclaration:
	//	Variable {VariableDeclaration.variable=current} '=' value=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Action:
	//	'action' name=ID
	//	'(' inputs+=Variable? (',' inputs+=Variable)* ')';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//State:
	//	backgroundState?="backgroundState" name=ID | "state" name=ID "{"
	//	variables+=Variable*
	//	activities+=Activity+
	//	"}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Activity:
	//	declarations+=VariableDeclaration*
	//	'if' '(' if=Condition ')'
	//	'{' then+=Statement+ '}' ('else' (elseif=Activity | '{' else+=Statement+ '}'))?;
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}
	
	//Operator:
	//	equalTo?='==' | largerThan?='>' | smallerThan?='<' | largerOrEqualTo?='>=' | smallerOrEqualTo?='<=' |
	//	notEqualTo?='!=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Condition:
	//	(subjective=QualifiedName operator=Operator objective=Expression) ((and?='and' | or?='or')
	//	compareCondition=Condition)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Statement:
	//	isAction?='Do' actionStatement=ActionStatement | isChangeState?="->" changeStateStatement=ChangeStateStatement |
	//	assertStatement=AssertStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ActionStatement:
	//	action=[Action]
	//	'(' inputs+=QualifiedName* ')';
	public ActionStatementElements getActionStatementAccess() {
		return pActionStatement;
	}
	
	public ParserRule getActionStatementRule() {
		return getActionStatementAccess().getRule();
	}
	
	//AssertStatement:
	//	input=QualifiedName '=' value=Expression;
	public AssertStatementElements getAssertStatementAccess() {
		return pAssertStatement;
	}
	
	public ParserRule getAssertStatementRule() {
		return getAssertStatementAccess().getRule();
	}
	
	//ChangeStateStatement:
	//	"state" targetState=[State];
	public ChangeStateStatementElements getChangeStateStatementAccess() {
		return pChangeStateStatement;
	}
	
	public ParserRule getChangeStateStatementRule() {
		return getChangeStateStatementAccess().getRule();
	}
	
	//// ----------------------------------------------------------------------	
	//Expression:
	//	Term (({Plus.left=current} '+' | {Minus.left=current} '-') right=Term)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Term:
	//	Factor (({Multiply.left=current} '*' | {Division.left=current} '/') right=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor:
	//	number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | '(' expression=Expression ')';
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//// ----------------------------------------------------------------------
	//Number:
	//	INT | DOUBLE;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Parameter:
	//	Number | STRING | ID | BOOLEAN;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)* ('.' INT)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	'0'..'9'+ ('.' '0'..'9'+);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'false' | 'true';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
